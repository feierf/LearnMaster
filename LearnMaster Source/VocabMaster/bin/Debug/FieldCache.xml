<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FieldCache</name>
    </assembly>
    <members>
        <member name="T:FieldCacheNamespace.FieldCache`1">
            <summary>
            Provides lazy initialization experience. Is better than the Lazy class as:
            1) Is a struct
            2) Does not affect record's Equals in a bad way Lazy does
            <code>
            public int MyProperty => myProperty.GetValue(static @this => @this.SomeComplexMethod(), @this);
            public FieldCache int myProperty;
            </code>
            </summary>
            <typeparam name="T">
            The type to store inside
            </typeparam>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`1.Equals(FieldCacheNamespace.FieldCache{`0})">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`1.Equals(System.Object)">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`1.GetHashCode">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`1.GetValue``1(System.Func{``0,`0},``0)">
            <summary>
            It is guaranteed that <paramref name="factory"/> is called only once
            throughout all threads
            </summary>
            <param name="factory">This is a delegate which takes one argument
            (for example, "this" when used in records or classes) and passing it back to the factory
            returning created an instance of T</param>
            <param name="this">
            To avoid reallocation, your method must be static (that is, not reading any outside variables from the instance),
            and instead of addressing your fields by normal this, pass this argument and address via this one
            (see examples on the readme)
            </param>
            <returns>The value returned by factory</returns>
        </member>
    </members>
</doc>
